# This is a basic workflow to help you get started with Actions

name: Build VijayAnand.MauiToolkit

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allows you to run this workflow manually from the Actions tab
env:
  DOTNET_VERSION: ${{ secrets.DOTNET_VERSION }}
  BUILD_CONFIG: ${{ secrets.BUILD_CONFIG }}
  PKG_VERSION: ${{ secrets.MAUI_TOOLKIT_PKG_VERSION }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-maui-toolkit"
  build-maui-toolkit:
    # The type of runner that the job will run on
    runs-on: windows-latest
    defaults:
      run:
        working-directory: .\src\VijayAnand.MauiToolkit

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v2
        with:
          # Optional SDK version to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
          dotnet-version: ${{ env.DOTNET_VERSION }}
          # Whether prerelease versions should be matched with non-exact versions (for example 5.0.0-preview.6 being matched by 5, 5.0, 5.x or 5.0.x). Defaults to false if not provided.
          include-prerelease: false

      # Display .NET SDK version
      - name: Display .NET SDK version
        run: dotnet --version

      # Install Maui workload
      - name: Install Maui workload
        run: dotnet workload install maui

      # Install WebAssembly workload
      - name: Install WebAssembly workload
        run: dotnet workload install wasm-tools

      # Download Tizen workload install file
      - name: Download Tizen workload install file
        run: Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'tizen-workload-install.ps1';

      # Install Tizen workload
      - name: Install Tizen workload
        run: .\tizen-workload-install.ps1

      # List installed workload
      - name: List installed workloads
        run: dotnet workload list

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build the project in Release mode
      - name: Build the Solution in Release mode
        run: .\Create-Package.bat ${{ env.BUILD_CONFIG }} ${{ env.PKG_VERSION }}

      - name: Archive VijayAnand.MauiToolkit.Core NuGet package
        uses: actions/upload-artifact@v3
        with:
          name: archive-core-nuget-package
          path: src/VijayAnand.MauiToolkit/VijayAnand.MauiToolkit.Core/bin/${{ env.BUILD_CONFIG }}/VijayAnand.MauiToolkit.Core.${{ env.PKG_VERSION }}.nupkg

      - name: Archive VijayAnand.MauiToolkit NuGet package
        uses: actions/upload-artifact@v3
        with:
          name: archive-toolkit-nuget-package
          path: src/VijayAnand.MauiToolkit/VijayAnand.MauiToolkit/bin/${{ env.BUILD_CONFIG }}/VijayAnand.MauiToolkit.${{ env.PKG_VERSION }}.nupkg
