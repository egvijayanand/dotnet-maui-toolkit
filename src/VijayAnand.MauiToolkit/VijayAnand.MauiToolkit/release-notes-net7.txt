Join me on Developer Thoughts, https://egvijayanand.in/, an exclusive blog for .NET MAUI and Blazor.

What's new in ver. 2.1.0-preview.7:
-----------------------------------
This version of package is released on top of .NET MAUI on .NET 7 SR7 (7.0.92) version.

v2.1.0-preview.6:

WaitingPage, a page with a customizable busy indicator to show the progress to the user.

v2.1.0-preview.5:

1. Async property is now a bindable property.

2. MauiPage's TViewModel generic constraint is strengthened with the inclusion of the INotifyPropertyChanged interface.

3. Introduced another base class for .NET MAUI page definition, titled BasePage, with the ability to Auto Wireup ViewModel that follows a naming convention.

Like, SearchPage -> SearchViewModel

Page types are to be made available in the Views folder and ViewModel types in the ViewModels folder.

And both Page and ViewModel should be in the same assembly. If not then use, generic MauiPage<TViewModel> base type instead.

ViewModel type should inherit from BaseViewModel, a type from Core package that implements the INotifyPropertyChanged interface.

ViewModel should be registered in the .NET MAUI startup pipeline for the type to get resolved.

Then set the ViewModelLocator's AutoWireViewModel attached property to true.

Either from XAML like, ViewModelLocator.AutoWireViewModel="True" (import the appropriate XML namespace).

Or from the page constructor in the code-behind class file:

ViewModelLocator.SetAutoWireViewModel(this, true);

v2.1.0-preview.4:

Additional parameter introduced in the custom Prompt dialog to validate the user entered value before dismissing the dialog.

2.1.0-preview.3:

DialogService class is now marked as internal.

And to show the .NET MAUI dialogs, follow any of the below-mentioned approaches:

1. via Dependency Injection:

Register the dependency in the .NET MAUI startup pipeline.

Either with the UseVijayAnandMauiToolkit() extension method (invoked on the MauiAppBuilder instance).

Or directly add it to the Service collection, like:

builder.Services.AddSingleton<IDialogService>(GenericDialog.Instance);
builder.Services.AddSingleton<IMauiDialogService>(MauiDialog.Instance);

Then inject the implementation instance of the IDialogService/IMauiDialogService into the Page and invoke the appropriate method.

// Assuming _dialogService is the injected instance of IDialogService
await _dialogService.DisplayAlertAsync("Greeting", "Hello World", "OK");

// Assuming _mauiDialogService is the injected instance of IMauiDialogService with FlowDirection support
await _mauiDialogService.DisplayAlertAsync("Greeting", "Hello World", "OK", FlowDirection.RightToLeft);

2. via Static:

Instance of IDialogService is accessible via the GenericDialog/MauiDialog type's Instance property.

await GenericDialog.Instance.DisplayAlertAsync("Greeting", "Hello World", "OK");
// with FlowDirection support
await MauiDialog.Instance.DisplayAlertAsync("Greeting", "Hello World", "OK", FlowDirection.RightToLeft);

v2.1.0-preview.1:

1. ServiceRegistrations enum type is now moved to Core package.

2. Defined the MauiPage class, a base page to inherit while defining other pages, to easily work with .NET MAUI.

v2.0.1:

This version of package is released on top of .NET MAUI on .NET 7 SR1.1 (7.0.52) version.

v2.0.0:

Package supports .NET MAUI on .NET 7 and is built on top of .NET 7 GA release (7.0.49).

DisplayActionSheetAsync method in DialogService class now takes message and defaultButton as additional parameters in accordance with updated interface definition.

Added a new Markup Method, named AddSubMenuGroup, to define a sub-menu group within a menu group to manage the multi-level menu.

Here is an example of a sub-menu group:

"Change Location" is a first level menu group (under the "Locations" top level menu item) and "India" is a second level menu group within that.

This way multi-level menu can be defined.

MenuBarItems.Add(new MenuBarItem().Title("Locations")
                                  .AddMenuGroup(new MenuFlyoutSubItem().Title("Change Location")
                                                                       .AddSubMenuItem(new MenuFlyoutItem().Title("New York, USA"))
                                                                       .AddSubMenuItem(new MenuFlyoutItem().Title("London, UK"))
                                                                       .AddSubMenuItem(new MenuFlyoutItem().Title("Cape Town, RSA"))
                                                                       .AddSubMenuItem(new MenuFlyoutItem().Title("Beijing, PRC"))
                                                                       .AddSubMenuGroup(new MenuFlyoutSubItem().Title("India")
                                                                                                               .AddSubMenuItem(new MenuFlyoutItem().Title("Chennai, TN"))
                                                                                                               .AddSubMenuItem(new MenuFlyoutItem().Title("Kolkata, WB"))
                                                                                                               .AddSubMenuItem(new MenuFlyoutItem().Title("Mumbai, MH"))
                                                                                                               .AddSubMenuItem(new MenuFlyoutItem().Title("New Delhi, NCR"))))
                                  .AddMenuItem(new MenuFlyoutItem().Title("Add a Location").BindCommand("AddLocationCommand")));
