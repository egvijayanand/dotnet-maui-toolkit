Join me on Developer Thoughts, https://egvijayanand.in/, an exclusive blog for .NET MAUI and Blazor.

What's new in ver. 4.2.0:
-------------------------
1. Key-based service registration for generic method overloads within the integrated app hosting builder method.

This doesn't apply to the factory delegates since it's not supported.

The Application type (TApp) is an exception because it is passed to the Framework method.

2. The Window Title will update to match the Page Title when it is empty.

At present, .NET MAUI updates the Window Title only when the start page is Shell; otherwise, it remains blank unless set manually.

3. The app hosting builder method now accepts a page factory parameter, allowing it to be managed independently.

builder.UseMauiApp<App, Window, Page>(_ => new NavigationPage(new MainPage()));

v4.1.0:

The integrated app hosting builder method has been enhanced to support Application, Window, and Page in a single generic method call.

The prebuilt Window type can be used as it is. No need for a factory delegate for simple scenarios.

While using generic overloads, there's no need to register the types in the DI container.

var builder = MauiApp.CreateBuilder();
builder.UseMauiApp<App, Window, MainPage>();
// To use Shell as the initial page.
//builder.UseMauiApp<App, Window, AppShell>();
// Other configuration
return builder.Build();

Other overloads continue to work too.

v4.0.0:

Release built on top of .NET MAUI 9.

MauiAppBuilder extension methods provide an easy way to host both Application and Window with just a single method call.

A single place to handle all configuration-related tasks.

The Application type will simply act as a container for global resources and handle startup and shutdown events.

// To use the Window type as it is.

var builder = MauiApp.CreateBuilder();
builder.UseMauiApp<App, Window>(sp => new Window(new MainPage()) { Title = "MyApp" });
// Rest of the configuration ...
return builder.Build();

For customization, extend the Window type and link it here.

builder.UseMauiApp<App, MainWindow>();
