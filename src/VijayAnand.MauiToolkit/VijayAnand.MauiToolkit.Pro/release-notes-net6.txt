What's new in ver. 1.1.0-preview.2:
-----------------------------------
Note: Version # is aligned with the other packages in this suite.

Note: Version # is aligned with the other packages in this suite.

DialogService class is now marked as internal.

And to show the Popup implemented dialogs, follow any of the below-mentioned approaches:

1. via Dependency Injection:

Register the dependency in the .NET MAUI startup pipeline.

Either with the UseVijayAnandMauiToolkitPro() extension method (invoked on the MauiAppBuilder instance).

Or directly add it to the Service collection, like:

builder.Services.AddSingleton<IDialogService>(PopupDialog.Instance);

Then inject the instance of the IDialogService into the Page and invoke the appropriate method.

// Assuming _dialogService is the injected instance of IDialogService
await _dialogService.DisplayAlertAsync("Greeting", "Hello World", "OK");

2. via Static:

Instance of IDialogService is accessible via the PopupDialog type's Instance property.

await PopupDialog.Instance.DisplayAlertAsync("Greeting", "Hello World", "OK");

v1.1.0-preview.1:

1. Initial release of VijayAnand.MauiToolkit.Pro version of NuGet package.

2. Has dependency on CommunityToolkit.Maui and VijayAnand.MauiToolkit.Core NuGet packages.

3. To start with, a custom definition of the Dialogs based on the CommunityToolkit's Popup type.

3.1 This DialogService class is the implementation of the IDialogService interface definition in the Core package.

3.2 Register the dependency in the startup pipeline (MauiProgram.cs) with a call to the UseVijayAnandMauiToolkitPro() method:

Sample code:

public static class MauiProgram
{
    public static MauiApp CreateMauiApp()
    {
        var builder = MauiApp.CreateBuilder();
        builder.UseMauiApp<App>()
               .UseMauiCommunityToolkit()
               .UseVijayAnandMauiToolkitPro();

        return builder.Build();
    }
}

Join me on Developer Thoughts, https://egvijayanand.in/, an exclusive blog for .NET MAUI and Blazor.
