Join me on Developer Thoughts, https://egvijayanand.in/, an exclusive blog for .NET MAUI and Blazor.

What's new in ver. 2.1.0-preview.6:
-----------------------------------
The toolkit updated to a newer revision.

v2.1.0-preview.5:

The toolkit updated to a newer revision.

v2.1.0-preview.4:

Additional parameter introduced in the custom Prompt dialog to validate the user entered value before dismissing the dialog.

2.1.0-preview.3:

VijayAnand.MauiToolkit.Pro NuGet package now depends on the VijayAnand.MauiToolkit NuGet package.

DialogService class renamed as PopupDialogService.

To support localization, support for the FlowDirection parameter is now part of the overloaded methods. To be opted-in explicitly.

To allow further customization, custom Style properties have been assigned to the respective Views in the Popup dialog design.

DialogStyle -> Style of the Popup dialog (to be defined on the Border View)
DialogTitle -> Title of the Popup dialog
DialogMessage -> Message shown in the Popup dialog
Action -> Default button style on the ActionSheet
PrimaryAction -> Style for the Accept action on the Popup dialog
SecondaryAction -> Style for the Cancel action on the Popup dialog
DestructiveAction -> Style for the Destructive action on the Popup dialog

v2.1.0-preview.2:

DialogService class is now marked as internal.

And to show the Popup implemented dialogs, follow any of the below-mentioned approaches:

1. via Dependency Injection:

Register the dependency in the .NET MAUI startup pipeline.

Either with the UseVijayAnandMauiToolkitPro() extension method (invoked on the MauiAppBuilder instance).

Or directly add it to the Service collection, like:

builder.Services.AddSingleton<IDialogService>(PopupDialog.Instance);

Then inject the instance of the IDialogService into the Page and invoke the appropriate method.

// Assuming _dialogService is the injected instance of IDialogService
await _dialogService.DisplayAlertAsync("Greeting", "Hello World", "OK");

2. via Static:

Instance of IDialogService is accessible via the PopupDialog type's Instance property.

await PopupDialog.Instance.DisplayAlertAsync("Greeting", "Hello World", "OK");

v2.1.0-preview.1:

Note: Version # is aligned with the other packages in this suite.

1. Initial release of VijayAnand.MauiToolkit.Pro version of NuGet package.

2. Has dependency on CommunityToolkit.Maui and VijayAnand.MauiToolkit.Core NuGet packages.

3. To start with, a custom definition of the Dialogs based on the CommunityToolkit's Popup type.

3.1 This DialogService class is the implementation of the IDialogService interface definition in the Core package.

3.2 Register the dependency in the startup pipeline (MauiProgram.cs) with a call to the UseVijayAnandMauiToolkitPro() method:

Sample code:

public static class MauiProgram
{
    public static MauiApp CreateMauiApp()
    {
        var builder = MauiApp.CreateBuilder();
        builder.UseMauiApp<App>()
               .UseMauiCommunityToolkit()
               .UseVijayAnandMauiToolkitPro();

        return builder.Build();
    }
}
